@model IEnumerable<CrudAssignment.Entities.Models.Product>

@{
    ViewBag.Title = "Index";
}

<!-- DataTables CSS -->
<link rel="stylesheet" type="text/css" href="//cdn.datatables.net/1.10.7/css/jquery.dataTables.css">
<link rel="stylesheet" href="/Content/screen.css" type="text/css" media="screen" title="default">
<link rel="stylesheet" href="/Content/popup.css" type="text/css" media="screen" title="default">
@section scripts
{
    <!-- DataTables -->
    <script type="text/javascript" charset="utf8" src="/Scripts/jquery.dataTables.min.js"></script>
    
    <!-- Custom jquery scripts -->
    <script src="/Scripts/custom_jquery.js" type="text/javascript"></script>

    <script type="text/javascript">
        var productTable = null;

        var product_table_datatable_order_setting = null;

        $(document).ready(function() {
            reloadData();
        });

        function createDataTable() {
            productTable = $('#product-table').DataTable({
                paging: false,
                searching: false,
                info: false,
                "aoColumnDefs": [{ "bSortable": false, "aTargets": [0, 7] }],
                order: (product_table_datatable_order_setting != null ? product_table_datatable_order_setting : [[3, "asc"]])
            });
        }

        $('#select-all').click(function() {
            var changeTo = this.checked
            $("input[name='row-checkbox']").each(function() {
                this.checked = changeTo;
            });
        });

        function getSelectedEntriesId() {
            var selectedEntriesId = [];
            $("input[name='row-checkbox']").each(function() {
                //type != hidden -> fix for error when all checkbox are checked by select-all checkbox
                if (this.checked && this.type != "hidden") {
                    selectedEntriesId.push(this.value);
                }
            });
            return selectedEntriesId;
        }

        $('#action-menu').click(function() {
            var selectedQty = getSelectedEntriesId().length;

            $('.action-add').hide();
            $('.action-edit').hide();
            $('.action-delete').hide();

            switch (selectedQty) {
                case 0:
                    $('.action-add').show();
                    break;
                case 1:
                    $('.action-edit').show();
                    $('.action-delete').show();
                    break;
                default:
                    $('.action-delete').show();
                    break;
            };
        });

        $('#action-delete').click(function() {
            $.get("/Product/ConfirmDelete/", { ids: getSelectedEntriesId().toString() },
                function(data) {
                    openDeleteConfirmationDialog(data);
                }
            );
            return false;
        });

        //1) Save table order settings and destroy DataTable 2) Remove all elements from product-table-body 3) Load all products to table 4) Create new DataTable
        function reloadData() {
            if (productTable != null) {
                product_table_datatable_order_setting = productTable.order();
                productTable.destroy();
            }
            $('#product-table-body').empty();
            $.getJSON("/Product/GetProducts/",
                function(data) {
                    data.forEach(function(product) {
                        var row = '<tr>';
                        row += '<td><input id="row-checkbox" name="row-checkbox" value="{0}" type="checkbox"></td>'.format(product.id);
                        row += '<td>{0}</td>'.format(product.category);
                        row += '<td>{0}</td>'.format(product.supplier);
                        row += '<td>{0}</td>'.format(product.name);
                        row += '<td>{0}</td>'.format(product.price);
                        row += '<td>{0}</td>'.format(product.deliveryPeriod);
                        row += '<td>{0}</td>'.format(product.minimumStock);
                        row += '<td></td>';
                        row += '</tr>';
                        $('#product-table-body').append(row);
                    });
                    createDataTable();
                }
            );
        }

        function confirmDeleteSelectedProduct() {
            $.get("/Product/DeleteProducts/", { ids: getSelectedEntriesId().toString() },
                function(data) {
                    closeDialog('delete-confirm-boxpopup');
                    if (data.StatusCode == 200) {
                        reloadData();
                    } else {
                        //ERROR
                    }
                }
            );
        }

        function openDeleteConfirmationDialog(productsToDelete) {
            //TODO: Scale window minimum height (or add scroll)
            var productsToDeleteTable = "<table border=1><tr><td>Id</td><td>Name</td></tr>";
            productsToDelete.forEach(function(product) {
                productsToDeleteTable += "<tr>";
                productsToDeleteTable += "<td>" + product.id + "</td>";
                productsToDeleteTable += "<td>" + product.name + "</td>";
                productsToDeleteTable += "</tr>";
            });
            productsToDeleteTable += "</table>";

            $("#delete-confirm-content-table").html(productsToDeleteTable);
            openDialog('delete-confirm-boxpopup');
        }

        function openDialog(prospectElementID) {
            $('#overlay').fadeIn('slow');
            $('#' + prospectElementID).fadeIn('slow');
        }

        function closeDialog(prospectElementID) {
            $('#overlay').fadeOut('slow');
            $('#' + prospectElementID).fadeOut('slow');
        }

    </script>
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table id="product-table" class="display dataTable">
    <thead>
        <tr>
            <th>
                @Html.CheckBox("select-all", new { id = "select-all" })
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Category.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Supplier.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DeliveryPeriod)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.MinimumStock)
            </th>
            <th></th>
        </tr>
    </thead>
    
    <tbody id="product-table-body">
    </tbody>

</table>

<div id="actions-box">
    <a href="" id="action-menu" class="action-slider"></a>
    <div id="actions-box-slider">
        <a href="" id="action-edit" class="action-edit">Edit</a>
        <a href="" id="action-delete" class="action-delete">Delete</a>
        <a href="" id="action-add" class="action-add">Add</a>
    </div>
</div>

<div id="wrapper">
    <div id="overlay" class="overlay"></div>
    <div id="delete-confirm-boxpopup" class="box">
        <a onclick="closeDialog('delete-confirm-boxpopup');" class="boxclose"></a>
        <div id="delete-confirm-popup-content">
            <h3>Do you want to delete selected products?</h3>
            <div id="delete-confirm-content-table"></div>
            <button onclick="confirmDeleteSelectedProduct();">Yes</button>
            <button onclick="closeDialog('delete-confirm-boxpopup');">No</button>
        </div>
    </div>
</div>
